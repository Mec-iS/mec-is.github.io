<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>pyHummus (DevOps)</title><link>http://mec-is.github.io/</link><description></description><atom:link rel="self" href="http://mec-is.github.io/categories/devops.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 25 Aug 2015 15:27:40 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Devops Basics</title><link>http://mec-is.github.io/posts/devops-basics/</link><dc:creator>lorenzogotuned</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="DevOps - CAMS" src="http://mec-is.github.io/assets/images/posts/devops1.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="DevOps - Packer: from VM to an artifact" src="http://mec-is.github.io/assets/images/posts/devops2.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Additional resources&lt;/h3&gt;
&lt;h4&gt;Notable Books&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://itrevolution.com/books/phoenix-project-devops-book/"&gt;The Phoenix Project&lt;/a&gt; (by Gene Kim, Kevin Behr, George Spafford) - A Novel About IT, DevOps, and Helping Your Business Win&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0"&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt; (by Jez Humble, David Farley) - The principles and technical practices that enable
rapid, incremental delivery of high quality, valuable new functionality to users.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Lean-Enterprise-Performance-Organizations-Innovate/dp/1449368425"&gt;Lean Enterprise: How High Performance Organizations Innovate at Scale &lt;/a&gt; (by Jez Humble, Joanne Molesky, Barry O'Reilly) - Lean and Agile principles and patterns to help you move fast at scale - and demonstrates why and how to apply these methodologies throughout your organization, rather than with just one department or team.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smile.amazon.com/gp/product/B00CBM1WFC"&gt;Building a DevOps Culture&lt;/a&gt; (by Mandi Walls) - Free Kindle book - DevOps is as much about culture as it is about tools&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Notable Presentations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=o7-IuYS0iSE"&gt;Short history of DevOps&lt;/a&gt; - video by Damon Edwards&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_DEToXsgrPc"&gt;Chef Style DevOps Kungfu&lt;/a&gt; - Adam Jacob Keynote - ChefConf 2015&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=L1w2_AY82WY"&gt;Jez Humble Keynote&lt;/a&gt; - ChefConf 2015&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/69079272"&gt;Leading the Horses to Drink&lt;/a&gt; - Support and Initiate a DevOps transformation by Damon Edwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Additional DevOps related blogs and sites&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.chef.io/blog/2010/07/16/what-devops-means-to-me/"&gt;What DevOps means to me&lt;/a&gt; - an explanation of the components that make up CAMS (Culture, Automation, Measurement, Sharing), as well additional thoughts on what DevOps is and is not - by John Willis&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev2ops.org/"&gt;dev2ops&lt;/a&gt; - Delivering Change in a DevOps and Cloud World&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theagileadmin.com/"&gt;the agile admin&lt;/a&gt; - blog on topics of DevOps, agile operations, cloud computing, infrastructure automation, Web security (especially AppSec), transparency, open source, monitoring, Web performance optimization, and more.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devopschecklist.com/"&gt;The DevOps checklist&lt;/a&gt; - This checklist is comprised of 48 items you can use to gauge the maturity of your software delivery competency, and form a baseline to measure your future improvements.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mattstratton.com/"&gt;DevOps â€“ A Crash Course&lt;/a&gt; by Matt Stratton. A lot of links to good resources on DevOps topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Additional Resources by Nutanix&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stevenpoitras.com/the-nutanix-bible/"&gt;The Nutanix Bible&lt;/a&gt; - Brief History of datacenters, virtualisation, webscale architecture and an explanation of Nutanix hyperconverged architecture.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://go.nutanix.com/webscale-101-hyper-converged-infrastructure-guide.html"&gt;Hyperconverged Infrastructure Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nutanix.com/company/education/"&gt;Nutanix Education portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCJupSMWQRKQTvkb2CfkW0Eg"&gt;Nutanix Education YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://next.nutanix.com/"&gt;Nutanix NEXT community site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>DevOps</category><guid>http://mec-is.github.io/posts/devops-basics/</guid><pubDate>Wed, 05 Aug 2015 09:44:28 GMT</pubDate></item><item><title>Networking Basics</title><link>http://mec-is.github.io/posts/networking-basics/</link><dc:creator>lorenzogotuned</dc:creator><description>&lt;div&gt;&lt;p&gt;Thanks to &lt;a href="http://online.stanford.edu/course/introduction-computer-networking"&gt;Stanford Online&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Networks Layers (ISO-OSI)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="OSI 4 layers communication" src="http://mec-is.github.io/assets/images/posts/ISO-flow.png"&gt;&lt;/p&gt;
&lt;h3&gt;Network Layer&lt;/h3&gt;
&lt;p&gt;Delivers packets to computers&lt;/p&gt;
&lt;p&gt;&lt;img alt="IP in OSI" src="http://mec-is.github.io/assets/images/posts/ISO-4.png"&gt;&lt;/p&gt;
&lt;h4&gt;Internet Protocol: characteristics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP is a &lt;em&gt;datagram service&lt;/em&gt;. Datagrams are self-contained: data and header (destination address + source address). Datagrams are delivered hop-by-hop (node-to-node, router-to-router). Routers have forwarding tables for different IP addresses, they know only the next hop for the datagram in the packet.&lt;/li&gt;
&lt;li&gt;IP is &lt;em&gt;unreliable&lt;/em&gt;. Packets may get lost or dropped, or simply delivered out of sequence compared with the sending sequence.&lt;/li&gt;
&lt;li&gt;IP guarantees the &lt;em&gt;best effort&lt;/em&gt;: packets will be dropped only when necessary (recovery these errors is on Transport, or Link).&lt;/li&gt;
&lt;li&gt;IP is &lt;em&gt;connectionless&lt;/em&gt;. It maintains no knowledge at all of the state or sent datagrams &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
The IP layer does not guarantee that packets will be delivered in order or always follow the same path through the network. Each packet is individually routed. Often, all the packets in a flow &lt;em&gt;do&lt;/em&gt; follow the same path. But the path may change if a link fails and packets follow a new path. Or if a router load-balances packets, packet-by-packet over several different output links.&lt;/p&gt;
&lt;h4&gt;Internet Protocol: model and features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP is a deliberately simple service, to work on different kinds of physical infrastructure&lt;/li&gt;
&lt;li&gt;IP tries to prevent pakets looping forever (usually due to updates in forwarding tables), using the hop-count field in the datagram (TTL field).&lt;/li&gt;
&lt;li&gt;IP limits packets size depending on the underlying Link (different networks have different max-size for packets, Network layers in routers fragments packets exceed max-size)&lt;/li&gt;
&lt;li&gt;IP uses checksums to check the header is not being corrupted and the destination is right&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;IPv4 Datagram&lt;/h4&gt;
&lt;p&gt;&lt;img alt="IP in OSI" src="http://mec-is.github.io/assets/images/posts/ipv4-datagram.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You can experience the different hops walked by a packed with the &lt;em&gt;traceroute&lt;/em&gt; command (&lt;code&gt;$&amp;gt; traceroute -w 1 www.google.com&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;Transport Layer&lt;/h3&gt;
&lt;p&gt;delivers data to applications&lt;/p&gt;
&lt;h4&gt;TCP Byte Stream&lt;/h4&gt;
&lt;p&gt;Client and server establish a communication using the three-way-handshake (SYN &amp;gt; SYN/ACK &amp;gt; ACK):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client sends a "synchronize" (SYN)&lt;/li&gt;
&lt;li&gt;server responds with a "synchronize/acknowledge" (SYN/ACK)&lt;/li&gt;
&lt;li&gt;client responds with an "acknowledge" (ACK)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everybody can interact and learn about this behaviour with software like (Wireshark)[https://www.wireshark.org/]&lt;/p&gt;
&lt;h3&gt;Packets&lt;/h3&gt;
&lt;p&gt;Packet switching, Layering, Encapsulation&lt;/p&gt;
&lt;h4&gt;Packet Switching&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Reminder&lt;/em&gt;: packets are self-contained, independent chunks of communication. &lt;br&gt;&lt;br&gt;
Flow: a collection of datagrams belonging to the same end-to-end communication (e.g. a TCP connection).&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Packet switching principle in a common router: &lt;em&gt;Independently, for each arriving packet, pick its outgoing link. If the link is free, send it. Else, hold the packet for later.&lt;/em&gt;. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This principle has important consequences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple packet forwarding: each router has its own forwarding table, that defines the next hop to the destination defined in the packet.&lt;/li&gt;
&lt;li&gt;efficient sharing of links (lines between hops): many different packets from different users/connections can share the same link.&lt;/li&gt;
&lt;li&gt;considering that data traffic is bursty. packet switching allows to use all available link capacity and to share link capacity. This is called &lt;em&gt;statistical multiplexing&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Layering&lt;/h4&gt;
&lt;p&gt;Layering is a well-know structure for computer and network systems&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layers" src="http://mec-is.github.io/assets/images/posts/layering1.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Example of use layering outside networks:&lt;br&gt;
&lt;img alt="Layers in computer systems" src="http://mec-is.github.io/assets/images/posts/layering2.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Five main reason for Layering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modularity: It breaks down the system into smaller, more manageable modules&lt;/li&gt;
&lt;li&gt;Well defined services: Each layer provides a well defined service to the layer above&lt;/li&gt;
&lt;li&gt;Reuse: A layer above can rely on all the hard work put in by others to implement the layers below&lt;/li&gt;
&lt;li&gt;Separation of concerns: Each layer can focus on its own job, without having to worry about how other layers do theirs &lt;/li&gt;
&lt;li&gt;Continous improvement (ex. cross-layer optimization)&lt;/li&gt;
&lt;li&gt;A 6th benefit is specific to layered communication systems, such as the Internet. That is peer to peer communications&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Encapsulation&lt;/h4&gt;
&lt;p&gt;When you send a TCP segment, for example, itâ€™s inside an IP packet, which is inside an Ethernet frame. Encapsulation is how this works. Encapsulation is the principle by which you organize information in packets so that you can maintain layers, yet let them share the contents of your packets.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The way this works is each protocol layer has some headers, followed by its payload.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;u&gt;A HTTP GET request of a Wi-Fi Ethernet&lt;/u&gt;: The HTTP GET request is the payload of a TCP segment. The TCP segment, encapsulating the HTTP GET, is the payload of an IP packet. This IP packet, encapsulating the TCP segment and the HTTP GET, is the payload of a Wi-Fi frame. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encapsulation of a HTTP GET" src="http://mec-is.github.io/assets/images/posts/encapsulation1.png"&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Image&lt;/em&gt;: This is how WireShark represent the example above, each line represents the different layers' payloads (from bottom to top: the application layer with the HTTP request, the transport layer with the TCP segment, the IP layer with the datagram, and the Ethernet frame).&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;u&gt;VPN&lt;/u&gt;: HTTP inside TCP inside IP inside TLS inside TCP inside IP inside Ethernet. In VPN the initial payloads are encypted in TLS and sent to the VPN gateway, that can decrypt them and route the decrypted payload inside the private network.&lt;/p&gt;
&lt;h3&gt;Addres Resolution Protocol (ARP)&lt;/h3&gt;
&lt;p&gt;ARP is the mechanism by which the network layer can discover the link address associated with a network address itâ€™s directly connected to. It's the algorithm that maps IP packets address to link address for the next hop in the link for a given packet. An IP address is a network-level address. It describes a host, a unique destination at the network
layer. A link address, in contrast, describes a particular network card, a unique device.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Network and Link addresses" src="http://mec-is.github.io/assets/images/posts/ARP1.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The fact that link layer and network layer addresses are decoupled logically but coupled in practice is in some ways a historical artifact. When the Internet started, there were many link layers, and it wanted to be able to run on top of all of them. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;ARP is a simple request-reply protocol. Every node keeps a cache of mappings from IP addresses on its network to link layer addresses. The requester can ask for a network-link address map so that every node hears the request, a node sends requests to a link layer broadcast address.
Every node in the network will hear the packet.
Furthermore, ARP is structured so that it contains redundant data. The request contains
the network and link layer address of the requestor. That way, when nodes hear a request
(since itâ€™s broadcast), they can insert or refresh a mapping in their cache.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ARP packet" src="http://mec-is.github.io/assets/images/posts/ARP2.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;If a node needs to send a packet to or through an IP address whose link layer address it does not have, it can request the address through ARP.&lt;/p&gt;&lt;/div&gt;</description><category>DevOps</category><category>Networking</category><guid>http://mec-is.github.io/posts/networking-basics/</guid><pubDate>Wed, 29 Jul 2015 15:35:22 GMT</pubDate></item></channel></rss>