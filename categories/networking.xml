<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pyHummus (Networking)</title><link>http://mec-is.github.io/</link><description></description><atom:link type="application/rss+xml" href="http://mec-is.github.io/categories/networking.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 19 Oct 2015 15:01:11 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Asyncio First Look</title><link>http://mec-is.github.io/posts/asyncio-first-look/</link><dc:creator>lorenzogotuned</dc:creator><description>&lt;div&gt;&lt;h3&gt;Definitions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A Good explanation for &lt;a href="http://stackoverflow.com/a/5201906/2536357"&gt;&lt;em&gt;Threading&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;"A piece of code is &lt;em&gt;thread-safe&lt;/em&gt; if it functions correctly during simultaneous execution by multiple threads." (Wikipedia). For a discussion about how thread-safety is strictly connected to scenarios in which specific objectives are pursued (accessing/modifying mutable data-structures for example), see &lt;a href="http://blogs.msdn.com/b/ericlippert/archive/2009/10/19/what-is-this-thing-you-call-thread-safe.aspx"&gt;here&lt;/a&gt;. The author sustains that thread-safety is strictly related to the tasks the software performs. It can be, or not, thread-safe related to what it is performing, and not just generically thread-safe.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Generators coroutines and async coroutines&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;from &lt;a href="https://docs.python.org/3/library/asyncio-task.html"&gt;Pydocs&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;"Coroutines used with &lt;strong&gt;asyncio&lt;/strong&gt; may be implemented using the &lt;strong&gt;async def&lt;/strong&gt; statement, or by using &lt;strong&gt;generators&lt;/strong&gt;."&lt;/p&gt;
&lt;p&gt;"Generator-based coroutines use the &lt;strong&gt;yield from&lt;/strong&gt; syntax introduced in &lt;a href="http://www.python.org/dev/peps/pep-0380"&gt;PEP 380&lt;/a&gt;, instead of the original yield syntax."&lt;/p&gt;
&lt;h5&gt;Disambiguation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;function&lt;/strong&gt; that defines a coroutine (a function definition using async def or decorated with @asyncio.coroutine). If disambiguation is needed we will call this a coroutine function (iscoroutinefunction() returns True).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;object&lt;/strong&gt; obtained by calling a coroutine function. This object represents a computation or an I/O operation (usually a combination) that will complete eventually. If disambiguation is needed we will call it a coroutine object (iscoroutine() returns True).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Basics&lt;/h5&gt;
&lt;p&gt;"Calling a coroutine does not start its code running. Calling a coroutine does not start its code running – the coroutine object returned by the call doesn’t do anything until you schedule its execution."&lt;/p&gt;
&lt;p&gt;Things a coroutine can do:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;result = await future&lt;/em&gt; or &lt;em&gt;result = yield from future&lt;/em&gt; – suspends the coroutine until the future is done, then returns the future’s result, or raises an exception, which will be propagated. (If the future is cancelled, it will raise a CancelledError exception.) Note that tasks are futures, and everything said about futures also applies to tasks.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;result = await coroutine&lt;/em&gt; or &lt;em&gt;result = yield from coroutine&lt;/em&gt; – wait for another coroutine to produce a result (or raise an exception, which will be propagated). The coroutine expression must be a call to another coroutine.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;return expression&lt;/em&gt; – produce a result to the coroutine that is waiting for this one using await or yield from.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;raise exception&lt;/em&gt; – raise an exception in the coroutine that is waiting for this one using await or yield from.&lt;/p&gt;
&lt;h5&gt;Example: Two async coroutines&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Compute &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; + &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; ..."&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; + &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;await compute&lt;/code&gt; makes &lt;code&gt;print_sum&lt;/code&gt; to wait for the coroutine to complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The loop is created by the &lt;code&gt;BaseEventLoop.run_until_complete()&lt;/code&gt; method when it gets a &lt;u&gt;coroutine object instead of a task.&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;see &lt;a href="https://docs.python.org/3/library/asyncio-eventloop.html"&gt;BaseEventLoop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Future&lt;/h4&gt;
&lt;p&gt;Construct used for synchronization in concurrent operations. "... describe an object that acts as a proxy for a result that is initially unknown, usually because the computation of its value is yet incomplete."(Wikipedia)&lt;/p&gt;
&lt;p&gt;Return a result or an exception when it's done. If invoked can raise different exceptions defining its actual state (None, InvalidStateError, CancelledError). Can have a callback to be run when it's done. "&lt;code&gt;result()&lt;/code&gt; and &lt;code&gt;exception()&lt;/code&gt; methods do not take a timeout argument and raise an exception when the future isn’t done yet."&lt;/p&gt;
&lt;h4&gt;Task&lt;/h4&gt;
&lt;p&gt;"A task is responsible for executing a coroutine object in an event loop. If the wrapped coroutine yields from a future, the task suspends the execution of the wrapped coroutine and waits for the completition of the future. When the future is done, the execution of the wrapped coroutine restarts with the result or the exception of the future."&lt;/p&gt;
&lt;p&gt;"Event loops use cooperative scheduling: an event loop only runs one task at a time. Other tasks may run in parallel if other event loops are running in different threads. While a task waits for the completion of a future, the event loop executes a new task."&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Important:&lt;/u&gt; "Don’t directly create Task instances: use the &lt;code&gt;ensure_future()&lt;/code&gt; function or the &lt;code&gt;BaseEventLoop.create_task()&lt;/code&gt; method."&lt;/p&gt;&lt;/div&gt;</description><category>Networking</category><guid>http://mec-is.github.io/posts/asyncio-first-look/</guid><pubDate>Mon, 19 Oct 2015 14:08:39 GMT</pubDate></item><item><title>Curl</title><link>http://mec-is.github.io/posts/curl/</link><dc:creator>lorenzogotuned</dc:creator><description>&lt;div&gt;&lt;h5&gt;Example of POSTing with cURL&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -i -X POST url.com/post_here -F &lt;span class="s2"&gt;"some_parameter1=&amp;lt;some_file.ext"&lt;/span&gt; -F &lt;span class="s2"&gt;"some_parameter2=abc"&lt;/span&gt;
&lt;/pre&gt;


&lt;h5&gt;pycURL&lt;/h5&gt;
&lt;p&gt;... more to come, under-construction&lt;/p&gt;&lt;/div&gt;</description><category>Curl</category><category>Networking</category><category>Testing</category><guid>http://mec-is.github.io/posts/curl/</guid><pubDate>Wed, 05 Aug 2015 12:16:56 GMT</pubDate></item><item><title>Networking Basics</title><link>http://mec-is.github.io/posts/networking-basics/</link><dc:creator>lorenzogotuned</dc:creator><description>&lt;div&gt;&lt;p&gt;Thanks to &lt;a href="http://online.stanford.edu/course/introduction-computer-networking"&gt;Stanford Online&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Networks Layers (ISO-OSI)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="OSI 4 layers communication" src="http://mec-is.github.io/assets/images/posts/ISO-flow.png"&gt;&lt;/p&gt;
&lt;h3&gt;Network Layer&lt;/h3&gt;
&lt;p&gt;Delivers packets to computers&lt;/p&gt;
&lt;p&gt;&lt;img alt="IP in OSI" src="http://mec-is.github.io/assets/images/posts/ISO-4.png"&gt;&lt;/p&gt;
&lt;h4&gt;Internet Protocol: characteristics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP is a &lt;em&gt;datagram service&lt;/em&gt;. Datagrams are self-contained: data and header (destination address + source address). Datagrams are delivered hop-by-hop (node-to-node, router-to-router). Routers have forwarding tables for different IP addresses, they know only the next hop for the datagram in the packet.&lt;/li&gt;
&lt;li&gt;IP is &lt;em&gt;unreliable&lt;/em&gt;. Packets may get lost or dropped, or simply delivered out of sequence compared with the sending sequence.&lt;/li&gt;
&lt;li&gt;IP guarantees the &lt;em&gt;best effort&lt;/em&gt;: packets will be dropped only when necessary (recovery these errors is on Transport, or Link).&lt;/li&gt;
&lt;li&gt;IP is &lt;em&gt;connectionless&lt;/em&gt;. It maintains no knowledge at all of the state or sent datagrams &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
The IP layer does not guarantee that packets will be delivered in order or always follow the same path through the network. Each packet is individually routed. Often, all the packets in a flow &lt;em&gt;do&lt;/em&gt; follow the same path. But the path may change if a link fails and packets follow a new path. Or if a router load-balances packets, packet-by-packet over several different output links.&lt;/p&gt;
&lt;h4&gt;Internet Protocol: model and features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP is a deliberately simple service, to work on different kinds of physical infrastructure&lt;/li&gt;
&lt;li&gt;IP tries to prevent pakets looping forever (usually due to updates in forwarding tables), using the hop-count field in the datagram (TTL field).&lt;/li&gt;
&lt;li&gt;IP limits packets size depending on the underlying Link (different networks have different max-size for packets, Network layers in routers fragments packets exceed max-size)&lt;/li&gt;
&lt;li&gt;IP uses checksums to check the header is not being corrupted and the destination is right&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;IPv4 Datagram&lt;/h4&gt;
&lt;p&gt;&lt;img alt="IP in OSI" src="http://mec-is.github.io/assets/images/posts/ipv4-datagram.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You can experience the different hops walked by a packed with the &lt;em&gt;traceroute&lt;/em&gt; command (&lt;code&gt;$&amp;gt; traceroute -w 1 www.google.com&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;Transport Layer&lt;/h3&gt;
&lt;p&gt;delivers data to applications&lt;/p&gt;
&lt;h4&gt;TCP Byte Stream&lt;/h4&gt;
&lt;p&gt;Client and server establish a communication using the three-way-handshake (SYN &amp;gt; SYN/ACK &amp;gt; ACK):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client sends a "synchronize" (SYN)&lt;/li&gt;
&lt;li&gt;server responds with a "synchronize/acknowledge" (SYN/ACK)&lt;/li&gt;
&lt;li&gt;client responds with an "acknowledge" (ACK)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everybody can interact and learn about this behaviour with software like (Wireshark)[https://www.wireshark.org/]&lt;/p&gt;
&lt;h3&gt;Packets&lt;/h3&gt;
&lt;p&gt;Packet switching, Layering, Encapsulation&lt;/p&gt;
&lt;h4&gt;Packet Switching&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Reminder&lt;/em&gt;: packets are self-contained, independent chunks of communication. &lt;br&gt;&lt;br&gt;
Flow: a collection of datagrams belonging to the same end-to-end communication (e.g. a TCP connection).&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Packet switching principle in a common router: &lt;em&gt;Independently, for each arriving packet, pick its outgoing link. If the link is free, send it. Else, hold the packet for later.&lt;/em&gt;. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This principle has important consequences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple packet forwarding: each router has its own forwarding table, that defines the next hop to the destination defined in the packet.&lt;/li&gt;
&lt;li&gt;efficient sharing of links (lines between hops): many different packets from different users/connections can share the same link.&lt;/li&gt;
&lt;li&gt;considering that data traffic is bursty. packet switching allows to use all available link capacity and to share link capacity. This is called &lt;em&gt;statistical multiplexing&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Layering&lt;/h4&gt;
&lt;p&gt;Layering is a well-know structure for computer and network systems&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layers" src="http://mec-is.github.io/assets/images/posts/layering1.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Example of use layering outside networks:&lt;br&gt;
&lt;img alt="Layers in computer systems" src="http://mec-is.github.io/assets/images/posts/layering2.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Five main reason for Layering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modularity: It breaks down the system into smaller, more manageable modules&lt;/li&gt;
&lt;li&gt;Well defined services: Each layer provides a well defined service to the layer above&lt;/li&gt;
&lt;li&gt;Reuse: A layer above can rely on all the hard work put in by others to implement the layers below&lt;/li&gt;
&lt;li&gt;Separation of concerns: Each layer can focus on its own job, without having to worry about how other layers do theirs &lt;/li&gt;
&lt;li&gt;Continous improvement (ex. cross-layer optimization)&lt;/li&gt;
&lt;li&gt;A 6th benefit is specific to layered communication systems, such as the Internet. That is peer to peer communications&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Encapsulation&lt;/h4&gt;
&lt;p&gt;When you send a TCP segment, for example, it’s inside an IP packet, which is inside an Ethernet frame. Encapsulation is how this works. Encapsulation is the principle by which you organize information in packets so that you can maintain layers, yet let them share the contents of your packets.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The way this works is each protocol layer has some headers, followed by its payload.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;u&gt;A HTTP GET request of a Wi-Fi Ethernet&lt;/u&gt;: The HTTP GET request is the payload of a TCP segment. The TCP segment, encapsulating the HTTP GET, is the payload of an IP packet. This IP packet, encapsulating the TCP segment and the HTTP GET, is the payload of a Wi-Fi frame. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Encapsulation of a HTTP GET" src="http://mec-is.github.io/assets/images/posts/encapsulation1.png"&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Image&lt;/em&gt;: This is how WireShark represent the example above, each line represents the different layers' payloads (from bottom to top: the application layer with the HTTP request, the transport layer with the TCP segment, the IP layer with the datagram, and the Ethernet frame).&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;u&gt;VPN&lt;/u&gt;: HTTP inside TCP inside IP inside TLS inside TCP inside IP inside Ethernet. In VPN the initial payloads are encypted in TLS and sent to the VPN gateway, that can decrypt them and route the decrypted payload inside the private network.&lt;/p&gt;
&lt;h3&gt;Addres Resolution Protocol (ARP)&lt;/h3&gt;
&lt;p&gt;ARP is the mechanism by which the network layer can discover the link address associated with a network address it’s directly connected to. It's the algorithm that maps IP packets address to link address for the next hop in the link for a given packet. An IP address is a network-level address. It describes a host, a unique destination at the network
layer. A link address, in contrast, describes a particular network card, a unique device.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Network and Link addresses" src="http://mec-is.github.io/assets/images/posts/ARP1.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The fact that link layer and network layer addresses are decoupled logically but coupled in practice is in some ways a historical artifact. When the Internet started, there were many link layers, and it wanted to be able to run on top of all of them. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;ARP is a simple request-reply protocol. Every node keeps a cache of mappings from IP addresses on its network to link layer addresses. The requester can ask for a network-link address map so that every node hears the request, a node sends requests to a link layer broadcast address.
Every node in the network will hear the packet.
Furthermore, ARP is structured so that it contains redundant data. The request contains
the network and link layer address of the requestor. That way, when nodes hear a request
(since it’s broadcast), they can insert or refresh a mapping in their cache.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ARP packet" src="http://mec-is.github.io/assets/images/posts/ARP2.png"&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;If a node needs to send a packet to or through an IP address whose link layer address it does not have, it can request the address through ARP.&lt;/p&gt;&lt;/div&gt;</description><category>DevOps</category><category>Networking</category><guid>http://mec-is.github.io/posts/networking-basics/</guid><pubDate>Wed, 29 Jul 2015 15:35:22 GMT</pubDate></item></channel></rss>