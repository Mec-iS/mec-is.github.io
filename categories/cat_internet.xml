<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>pyHummus (Internet)</title><link>http://mec-is.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://mec-is.github.io/categories/cat_internet.xml"></atom:link><language>en</language><lastBuildDate>Thu, 30 Jul 2015 14:50:45 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Networking Basics</title><link>http://mec-is.github.io/posts/networking-basics/</link><dc:creator>lorenzogotuned</dc:creator><description>&lt;div&gt;&lt;p&gt;Thanks to &lt;a href="http://online.stanford.edu/course/introduction-computer-networking"&gt;Stanford Online&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Networks Layers (ISO-OSI)&lt;/h2&gt;
&lt;p&gt;&lt;img alt="OSI 4 layers communication" src="http://mec-is.github.io/assets/images/posts/ISO-flow.png"&gt;&lt;/p&gt;
&lt;h3&gt;Network Layer&lt;/h3&gt;
&lt;p&gt;delivers packets to computers&lt;/p&gt;
&lt;p&gt;&lt;img alt="IP in OSI" src="http://mec-is.github.io/assets/images/posts/ISO-4.png"&gt;&lt;/p&gt;
&lt;h4&gt;Internet Protocol: characteristics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP is a &lt;em&gt;datagram service&lt;/em&gt;. Datagrams are self-contained: data and header (destination address + source address). Datagrams are delivered hop-by-hop (node-to-node, router-to-router). Routers have forwarding tables for different IP addresses, they know only the next hop for the datagram in the packet.&lt;/li&gt;
&lt;li&gt;IP is &lt;em&gt;unreliable&lt;/em&gt;. Packets may get lost or dropped, or simply delivered out of sequence compared with the sending sequence.&lt;/li&gt;
&lt;li&gt;IP guarantees the &lt;em&gt;best effort&lt;/em&gt;: packets will be dropped only when necessary (recovery these errors is on Transport, or Link).&lt;/li&gt;
&lt;li&gt;IP is &lt;em&gt;connectionless&lt;/em&gt;. It maintains no knowledge at all of the state or sent datagrams &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Internet Protocol: model and features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP is a deliberately simple service, to work on different kinds of physical infrastructure&lt;/li&gt;
&lt;li&gt;IP tries to prevent pakets looping forever (usually due to updates in forwarding tables), using the hop-count field in the datagram (TTL field).&lt;/li&gt;
&lt;li&gt;IP limits packets size depending on the underlying Link (different networks have different max-size for packets, Network layers in routers fragments packets exceed max-size)&lt;/li&gt;
&lt;li&gt;IP uses checksums to check the header is not being corrupted and the destination is right&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;IPv4 Datagram&lt;/h4&gt;
&lt;p&gt;&lt;img alt="IP in OSI" src="http://mec-is.github.io/assets/images/posts/ipv4-datagram.png"&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You can experience the different hops walked by a packed with the &lt;em&gt;traceroute&lt;/em&gt; command (&lt;code&gt;$&amp;gt; traceroute -w 1 www.google.com&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;Transport Layer&lt;/h3&gt;
&lt;p&gt;delivers data to applications&lt;/p&gt;
&lt;h4&gt;TCP Byte Stream&lt;/h4&gt;
&lt;p&gt;Client and server establish a communication using the three-way-handshake (SYN &amp;gt; SYN/ACK &amp;gt; ACK):
- client sends a "synchronize" (SYN)
- server responds with a "synchronize/acknowledge" (SYN/ACK)
- client responds with an "acknowledge" (ACK)&lt;/p&gt;
&lt;p&gt;Everybody can interact and learn about this behaviour with software like (Wireshark)[https://www.wireshark.org/]&lt;/p&gt;
&lt;h3&gt;Packets&lt;/h3&gt;
&lt;p&gt;Packet switching, Layering, Encapsulation&lt;/p&gt;
&lt;h4&gt;Packet Switching&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Reminder&lt;/em&gt;: packets are self-contained, independent chunks of communication. &lt;br&gt;
Flow: a collection of datagrams belonging to the same end-to-end communication (e.g. a TCP connection).&lt;/p&gt;
&lt;p&gt;Packet switching principle in a common router: &lt;em&gt;Independently, for each arriving packet, pick its outgoing link. If the link is free, send it. Else, hold the packet for later.&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;This principle has important consequences: 
- simple packet forwarding: each router has its own forwarding table, that defines the next hop to the destination defined in the packet.
- efficient sharing of links (lines between hops): many different packets from different users/connections can share the same link.
- considering that data traffic is bursty. packet switching allows to use all available link capacity and to share link capacity. This is called &lt;em&gt;statistical multiplexing&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>DevOps</category><category>Networking</category><guid>http://mec-is.github.io/posts/networking-basics/</guid><pubDate>Wed, 29 Jul 2015 15:35:22 GMT</pubDate></item></channel></rss>